# -*- coding: utf-8 -*-
"""Image Preprocessing and face detection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fN9-X3ZegZbz9BcBA6FeSRD39aP1uatV

Install OpenCv (dlib library can be used too)
"""

!pip install opencv-python opencv-python-headless

"""Pre Trained Face detection Model Haar Cascade Download"""

!wget https://github.com/opencv/opencv/raw/master/data/haarcascades/haarcascade_frontalface_default.xml

"""Uploading The images which needed to detect faces"""

from google.colab import files

# Upload images (Can add multiple pics at once)
uploaded = files.upload()

# List uploaded files
print(uploaded)

"""Creating a folder store processed Images"""

import os

output_folder = "processed_images"
os.makedirs(output_folder, exist_ok=True)

"""Implementing Face Detection

Grayscale Conversion:
   Convert images to grayscale to reduce complexity while preserving essential information.

Normalization:
   Scale pixel values to a standard range, typically 0 to 1, to improve convergence during model training.

Resizing:
   Resize the cropped face images to a uniform size, such as 96x96 pixels, to ensure consistent input for the model.

Histogram Equalization:
   Enhance the contrast of the images to make facial features more distinguishable.


"""

import cv2
from google.colab.patches import cv2_imshow
from google.colab import files
import os

# Load the Haar cascade
face_cascade = cv2.CascadeClassifier('haarcascade_frontalface_default.xml')

# Check if the Haar cascade is loaded properly
if face_cascade.empty():
    raise Exception("Haar cascade file not loaded properly!")

# Process each uploaded image
for file_name in uploaded.keys():

    # Read the image
    image = cv2.imread(file_name)

    # Convert the image to grayscale
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

    # Detect faces
    faces = face_cascade.detectMultiScale(gray, scaleFactor=1.1, minNeighbors=5, minSize=(30, 30))

    # Draw rectangles around detected faces
    for (x, y, w, h) in faces:
        cv2.rectangle(image, (x, y), (x + w, y + h), (255, 0, 0), 2)

#Saving Processed Images
    output_path = os.path.join(output_folder, f"processed_{file_name}")
    if cv2.imwrite(output_path, image):
        print(f"Processed and saved: {output_path}")
    else:
        print(f"Failed to save the processed image: {output_path}")

"""View the processed Images (Optional)"""

# List all processed images
processed_files = os.listdir(output_folder)
print("Processed images saved in:", output_folder)
print("Processed files:", processed_files)

# Display one of the processed images (optional)
for file_name in processed_files:
    file_path = os.path.join(output_folder, file_name)
    image = cv2.imread(file_path)
    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)  # Convert for correct display
    print(f"Displaying: {file_name}")
    cv2_imshow(image)

"""Download The Processed Image Folder (Optional)"""

from google.colab import files

# Download individual files manually
for file_name in processed_files:
    file_path = os.path.join(output_folder, file_name)
    files.download(file_path)

"""downloading as a zip file"""

# Download processed images as a ZIP file
# shutil.make_archive(output_folder, 'zip', output_folder)
# files.download(f"{output_folder}.zip")

"""Saving Processed Images"""

# Save the processed image to the folder

#    output_path = os.path.join(output_folder, f"processed_{file_name}")
#    if cv2.imwrite(output_path, image):
#        print(f"Processed and saved: {output_path}")
#    else:
#        print(f"Failed to save the processed image: {output_path}")